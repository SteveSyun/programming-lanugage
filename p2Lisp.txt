(defun removeNILTop (L)
   (cond ( (NULL L) NIL)
     ( (Null (CAR L)) (removeNILTop(CDR L)) )
     (T (cons (CAR L) (removeNILTop(CDR L))))
    )
)

(defun removeNILMost(L)
  (cond ( (NULL L)  NIL)
     ((NULL (CAR L)) (removeNILMost(CDR L)))
     ((listp (CAR L))(cons (removeNILMost (CAR L))(removeNILMost(CDR L))))
     (T (cons (CAR L)(removeNILMost(CDR L))))
  )
)

(defun reverseTop(L)
    (cond ((null L) nil)
     ((append (reverseTOP(CDR L))(list (CAR L))))
     )
)

(defun reverseALL(L)
     (cond ((null L) nil)
      ((listp (CAR L))(append(reverseAll(CDR L))(list (reverseALL(car L)))))
       ( T (append (reverseALL(CDR L))(list (car L))))
     )
)

(defun palindrome(L)
     (if (equal L (reverseAll L)) t nil)
)

(defun removeNilAll(L)
    (cond((null L) nil)
     ((null(car L))(removeNilAll(cdr L)))
    ((listp(car L))(append(removeNilAll(car L))(removeNilAll(cdr L))))
      (T (append(list(car L))(removeNilAll(cdr L))))
      )
)

